//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: wscan/proto/wscan.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Wscan_AddServiceClient`, then call methods of this protocol to make API calls.
internal protocol Wscan_AddServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol? { get }

  func wscan(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Response>

  func sendNotifications(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Response>

  func getWscans(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Responses>

  func updateWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Response>

  func getLastWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Response>

  func deleteWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Response>

  func generateWscanAfterCreatedLast(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Response>

  func sendNotification(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Wscan_Request, Wscan_Response>
}

extension Wscan_AddServiceClientProtocol {
  internal var serviceName: String {
    return "wscan.AddService"
  }

  /// Unary call to Wscan
  ///
  /// - Parameters:
  ///   - request: Request to send to Wscan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func wscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.wscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWscanInterceptors() ?? []
    )
  }

  /// Unary call to SendNotifications
  ///
  /// - Parameters:
  ///   - request: Request to send to SendNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendNotifications(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.sendNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendNotificationsInterceptors() ?? []
    )
  }

  /// Unary call to GetWscans
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWscans.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getWscans(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Responses> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.getWscans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWscansInterceptors() ?? []
    )
  }

  /// Unary call to UpdateWscan
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWscan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.updateWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWscanInterceptors() ?? []
    )
  }

  /// Unary call to GetLastWscan
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastWscan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLastWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.getLastWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastWscanInterceptors() ?? []
    )
  }

  /// Unary call to DeleteWscan
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWscan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.deleteWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWscanInterceptors() ?? []
    )
  }

  /// Unary call to GenerateWscanAfterCreatedLast
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateWscanAfterCreatedLast.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func generateWscanAfterCreatedLast(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.generateWscanAfterCreatedLast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateWscanAfterCreatedLastInterceptors() ?? []
    )
  }

  /// Unary call to SendNotification
  ///
  /// - Parameters:
  ///   - request: Request to send to SendNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendNotification(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.sendNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendNotificationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Wscan_AddServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Wscan_AddServiceNIOClient")
internal final class Wscan_AddServiceClient: Wscan_AddServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the wscan.AddService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Wscan_AddServiceNIOClient: Wscan_AddServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the wscan.AddService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Wscan_AddServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol? { get }

  func makeWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response>

  func makeSendNotificationsCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response>

  func makeGetWscansCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Responses>

  func makeUpdateWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response>

  func makeGetLastWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response>

  func makeDeleteWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response>

  func makeGenerateWscanAfterCreatedLastCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response>

  func makeSendNotificationCall(
    _ request: Wscan_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Wscan_AddServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Wscan_AddServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.wscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWscanInterceptors() ?? []
    )
  }

  internal func makeSendNotificationsCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.sendNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendNotificationsInterceptors() ?? []
    )
  }

  internal func makeGetWscansCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Responses> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.getWscans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWscansInterceptors() ?? []
    )
  }

  internal func makeUpdateWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.updateWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWscanInterceptors() ?? []
    )
  }

  internal func makeGetLastWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.getLastWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastWscanInterceptors() ?? []
    )
  }

  internal func makeDeleteWscanCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.deleteWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWscanInterceptors() ?? []
    )
  }

  internal func makeGenerateWscanAfterCreatedLastCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.generateWscanAfterCreatedLast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateWscanAfterCreatedLastInterceptors() ?? []
    )
  }

  internal func makeSendNotificationCall(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Wscan_Request, Wscan_Response> {
    return self.makeAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.sendNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Wscan_AddServiceAsyncClientProtocol {
  internal func wscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Response {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.wscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWscanInterceptors() ?? []
    )
  }

  internal func sendNotifications(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Response {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.sendNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendNotificationsInterceptors() ?? []
    )
  }

  internal func getWscans(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Responses {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.getWscans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWscansInterceptors() ?? []
    )
  }

  internal func updateWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Response {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.updateWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWscanInterceptors() ?? []
    )
  }

  internal func getLastWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Response {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.getLastWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastWscanInterceptors() ?? []
    )
  }

  internal func deleteWscan(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Response {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.deleteWscan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWscanInterceptors() ?? []
    )
  }

  internal func generateWscanAfterCreatedLast(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Response {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.generateWscanAfterCreatedLast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateWscanAfterCreatedLastInterceptors() ?? []
    )
  }

  internal func sendNotification(
    _ request: Wscan_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Wscan_Response {
    return try await self.performAsyncUnaryCall(
      path: Wscan_AddServiceClientMetadata.Methods.sendNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Wscan_AddServiceAsyncClient: Wscan_AddServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Wscan_AddServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Wscan_AddServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'wscan'.
  func makeWscanInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when invoking 'sendNotifications'.
  func makeSendNotificationsInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when invoking 'getWscans'.
  func makeGetWscansInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Responses>]

  /// - Returns: Interceptors to use when invoking 'updateWscan'.
  func makeUpdateWscanInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when invoking 'getLastWscan'.
  func makeGetLastWscanInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when invoking 'deleteWscan'.
  func makeDeleteWscanInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when invoking 'generateWscanAfterCreatedLast'.
  func makeGenerateWscanAfterCreatedLastInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when invoking 'sendNotification'.
  func makeSendNotificationInterceptors() -> [ClientInterceptor<Wscan_Request, Wscan_Response>]
}

internal enum Wscan_AddServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AddService",
    fullName: "wscan.AddService",
    methods: [
      Wscan_AddServiceClientMetadata.Methods.wscan,
      Wscan_AddServiceClientMetadata.Methods.sendNotifications,
      Wscan_AddServiceClientMetadata.Methods.getWscans,
      Wscan_AddServiceClientMetadata.Methods.updateWscan,
      Wscan_AddServiceClientMetadata.Methods.getLastWscan,
      Wscan_AddServiceClientMetadata.Methods.deleteWscan,
      Wscan_AddServiceClientMetadata.Methods.generateWscanAfterCreatedLast,
      Wscan_AddServiceClientMetadata.Methods.sendNotification,
    ]
  )

  internal enum Methods {
    internal static let wscan = GRPCMethodDescriptor(
      name: "Wscan",
      path: "/wscan.AddService/Wscan",
      type: GRPCCallType.unary
    )

    internal static let sendNotifications = GRPCMethodDescriptor(
      name: "SendNotifications",
      path: "/wscan.AddService/SendNotifications",
      type: GRPCCallType.unary
    )

    internal static let getWscans = GRPCMethodDescriptor(
      name: "GetWscans",
      path: "/wscan.AddService/GetWscans",
      type: GRPCCallType.unary
    )

    internal static let updateWscan = GRPCMethodDescriptor(
      name: "UpdateWscan",
      path: "/wscan.AddService/UpdateWscan",
      type: GRPCCallType.unary
    )

    internal static let getLastWscan = GRPCMethodDescriptor(
      name: "GetLastWscan",
      path: "/wscan.AddService/GetLastWscan",
      type: GRPCCallType.unary
    )

    internal static let deleteWscan = GRPCMethodDescriptor(
      name: "DeleteWscan",
      path: "/wscan.AddService/DeleteWscan",
      type: GRPCCallType.unary
    )

    internal static let generateWscanAfterCreatedLast = GRPCMethodDescriptor(
      name: "GenerateWscanAfterCreatedLast",
      path: "/wscan.AddService/GenerateWscanAfterCreatedLast",
      type: GRPCCallType.unary
    )

    internal static let sendNotification = GRPCMethodDescriptor(
      name: "SendNotification",
      path: "/wscan.AddService/SendNotification",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Wscan_AddServiceProvider: CallHandlerProvider {
  var interceptors: Wscan_AddServiceServerInterceptorFactoryProtocol? { get }

  func wscan(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Response>

  func sendNotifications(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Response>

  func getWscans(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Responses>

  func updateWscan(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Response>

  func getLastWscan(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Response>

  func deleteWscan(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Response>

  func generateWscanAfterCreatedLast(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Response>

  func sendNotification(request: Wscan_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Wscan_Response>
}

extension Wscan_AddServiceProvider {
  internal var serviceName: Substring {
    return Wscan_AddServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Wscan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeWscanInterceptors() ?? [],
        userFunction: self.wscan(request:context:)
      )

    case "SendNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeSendNotificationsInterceptors() ?? [],
        userFunction: self.sendNotifications(request:context:)
      )

    case "GetWscans":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Responses>(),
        interceptors: self.interceptors?.makeGetWscansInterceptors() ?? [],
        userFunction: self.getWscans(request:context:)
      )

    case "UpdateWscan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeUpdateWscanInterceptors() ?? [],
        userFunction: self.updateWscan(request:context:)
      )

    case "GetLastWscan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeGetLastWscanInterceptors() ?? [],
        userFunction: self.getLastWscan(request:context:)
      )

    case "DeleteWscan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeDeleteWscanInterceptors() ?? [],
        userFunction: self.deleteWscan(request:context:)
      )

    case "GenerateWscanAfterCreatedLast":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeGenerateWscanAfterCreatedLastInterceptors() ?? [],
        userFunction: self.generateWscanAfterCreatedLast(request:context:)
      )

    case "SendNotification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeSendNotificationInterceptors() ?? [],
        userFunction: self.sendNotification(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Wscan_AddServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Wscan_AddServiceServerInterceptorFactoryProtocol? { get }

  func wscan(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Response

  func sendNotifications(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Response

  func getWscans(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Responses

  func updateWscan(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Response

  func getLastWscan(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Response

  func deleteWscan(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Response

  func generateWscanAfterCreatedLast(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Response

  func sendNotification(
    request: Wscan_Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Wscan_Response
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Wscan_AddServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Wscan_AddServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Wscan_AddServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Wscan_AddServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Wscan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeWscanInterceptors() ?? [],
        wrapping: { try await self.wscan(request: $0, context: $1) }
      )

    case "SendNotifications":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeSendNotificationsInterceptors() ?? [],
        wrapping: { try await self.sendNotifications(request: $0, context: $1) }
      )

    case "GetWscans":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Responses>(),
        interceptors: self.interceptors?.makeGetWscansInterceptors() ?? [],
        wrapping: { try await self.getWscans(request: $0, context: $1) }
      )

    case "UpdateWscan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeUpdateWscanInterceptors() ?? [],
        wrapping: { try await self.updateWscan(request: $0, context: $1) }
      )

    case "GetLastWscan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeGetLastWscanInterceptors() ?? [],
        wrapping: { try await self.getLastWscan(request: $0, context: $1) }
      )

    case "DeleteWscan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeDeleteWscanInterceptors() ?? [],
        wrapping: { try await self.deleteWscan(request: $0, context: $1) }
      )

    case "GenerateWscanAfterCreatedLast":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeGenerateWscanAfterCreatedLastInterceptors() ?? [],
        wrapping: { try await self.generateWscanAfterCreatedLast(request: $0, context: $1) }
      )

    case "SendNotification":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Wscan_Request>(),
        responseSerializer: ProtobufSerializer<Wscan_Response>(),
        interceptors: self.interceptors?.makeSendNotificationInterceptors() ?? [],
        wrapping: { try await self.sendNotification(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Wscan_AddServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'wscan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWscanInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when handling 'sendNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendNotificationsInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when handling 'getWscans'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetWscansInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Responses>]

  /// - Returns: Interceptors to use when handling 'updateWscan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateWscanInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when handling 'getLastWscan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastWscanInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when handling 'deleteWscan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteWscanInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when handling 'generateWscanAfterCreatedLast'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateWscanAfterCreatedLastInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Response>]

  /// - Returns: Interceptors to use when handling 'sendNotification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendNotificationInterceptors() -> [ServerInterceptor<Wscan_Request, Wscan_Response>]
}

internal enum Wscan_AddServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AddService",
    fullName: "wscan.AddService",
    methods: [
      Wscan_AddServiceServerMetadata.Methods.wscan,
      Wscan_AddServiceServerMetadata.Methods.sendNotifications,
      Wscan_AddServiceServerMetadata.Methods.getWscans,
      Wscan_AddServiceServerMetadata.Methods.updateWscan,
      Wscan_AddServiceServerMetadata.Methods.getLastWscan,
      Wscan_AddServiceServerMetadata.Methods.deleteWscan,
      Wscan_AddServiceServerMetadata.Methods.generateWscanAfterCreatedLast,
      Wscan_AddServiceServerMetadata.Methods.sendNotification,
    ]
  )

  internal enum Methods {
    internal static let wscan = GRPCMethodDescriptor(
      name: "Wscan",
      path: "/wscan.AddService/Wscan",
      type: GRPCCallType.unary
    )

    internal static let sendNotifications = GRPCMethodDescriptor(
      name: "SendNotifications",
      path: "/wscan.AddService/SendNotifications",
      type: GRPCCallType.unary
    )

    internal static let getWscans = GRPCMethodDescriptor(
      name: "GetWscans",
      path: "/wscan.AddService/GetWscans",
      type: GRPCCallType.unary
    )

    internal static let updateWscan = GRPCMethodDescriptor(
      name: "UpdateWscan",
      path: "/wscan.AddService/UpdateWscan",
      type: GRPCCallType.unary
    )

    internal static let getLastWscan = GRPCMethodDescriptor(
      name: "GetLastWscan",
      path: "/wscan.AddService/GetLastWscan",
      type: GRPCCallType.unary
    )

    internal static let deleteWscan = GRPCMethodDescriptor(
      name: "DeleteWscan",
      path: "/wscan.AddService/DeleteWscan",
      type: GRPCCallType.unary
    )

    internal static let generateWscanAfterCreatedLast = GRPCMethodDescriptor(
      name: "GenerateWscanAfterCreatedLast",
      path: "/wscan.AddService/GenerateWscanAfterCreatedLast",
      type: GRPCCallType.unary
    )

    internal static let sendNotification = GRPCMethodDescriptor(
      name: "SendNotification",
      path: "/wscan.AddService/SendNotification",
      type: GRPCCallType.unary
    )
  }
}
