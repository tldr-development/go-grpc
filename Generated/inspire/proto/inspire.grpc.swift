// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: inspire/proto/inspire.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - inspire.AddService

/// Namespace containing generated types for the "inspire.AddService" service.
internal enum Inspire_AddService {
    /// Service descriptor for the "inspire.AddService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "Inspire" metadata.
        internal enum Inspire {
            /// Request type for "Inspire".
            internal typealias Input = Inspire_Request
            /// Response type for "Inspire".
            internal typealias Output = Inspire_Response
            /// Descriptor for "Inspire".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "Inspire"
            )
        }
        /// Namespace for "SendNotifications" metadata.
        internal enum SendNotifications {
            /// Request type for "SendNotifications".
            internal typealias Input = Inspire_Request
            /// Response type for "SendNotifications".
            internal typealias Output = Inspire_Response
            /// Descriptor for "SendNotifications".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "SendNotifications"
            )
        }
        /// Namespace for "GetInspires" metadata.
        internal enum GetInspires {
            /// Request type for "GetInspires".
            internal typealias Input = Inspire_Request
            /// Response type for "GetInspires".
            internal typealias Output = Inspire_Responses
            /// Descriptor for "GetInspires".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "GetInspires"
            )
        }
        /// Namespace for "UpdateInspire" metadata.
        internal enum UpdateInspire {
            /// Request type for "UpdateInspire".
            internal typealias Input = Inspire_Request
            /// Response type for "UpdateInspire".
            internal typealias Output = Inspire_Response
            /// Descriptor for "UpdateInspire".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "UpdateInspire"
            )
        }
        /// Namespace for "GetLastInspire" metadata.
        internal enum GetLastInspire {
            /// Request type for "GetLastInspire".
            internal typealias Input = Inspire_Request
            /// Response type for "GetLastInspire".
            internal typealias Output = Inspire_Response
            /// Descriptor for "GetLastInspire".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "GetLastInspire"
            )
        }
        /// Namespace for "DeleteInspire" metadata.
        internal enum DeleteInspire {
            /// Request type for "DeleteInspire".
            internal typealias Input = Inspire_Request
            /// Response type for "DeleteInspire".
            internal typealias Output = Inspire_Response
            /// Descriptor for "DeleteInspire".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "DeleteInspire"
            )
        }
        /// Namespace for "GenerateInspireAfterCreatedLast" metadata.
        internal enum GenerateInspireAfterCreatedLast {
            /// Request type for "GenerateInspireAfterCreatedLast".
            internal typealias Input = Inspire_Request
            /// Response type for "GenerateInspireAfterCreatedLast".
            internal typealias Output = Inspire_Response
            /// Descriptor for "GenerateInspireAfterCreatedLast".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "GenerateInspireAfterCreatedLast"
            )
        }
        /// Namespace for "SendNotification" metadata.
        internal enum SendNotification {
            /// Request type for "SendNotification".
            internal typealias Input = Inspire_Request
            /// Response type for "SendNotification".
            internal typealias Output = Inspire_Response
            /// Descriptor for "SendNotification".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService"),
                method: "SendNotification"
            )
        }
        /// Descriptors for all methods in the "inspire.AddService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Inspire.descriptor,
            SendNotifications.descriptor,
            GetInspires.descriptor,
            UpdateInspire.descriptor,
            GetLastInspire.descriptor,
            DeleteInspire.descriptor,
            GenerateInspireAfterCreatedLast.descriptor,
            SendNotification.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "inspire.AddService" service.
    internal static let inspire_AddService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "inspire.AddService")
}

// MARK: inspire.AddService (server)

extension Inspire_AddService {
    /// Streaming variant of the service protocol for the "inspire.AddService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Inspire" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Response` messages.
        func inspire(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response>

        /// Handle the "SendNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Response` messages.
        func sendNotifications(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response>

        /// Handle the "GetInspires" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Responses` messages.
        func getInspires(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Responses>

        /// Handle the "UpdateInspire" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Response` messages.
        func updateInspire(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response>

        /// Handle the "GetLastInspire" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Response` messages.
        func getLastInspire(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response>

        /// Handle the "DeleteInspire" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Response` messages.
        func deleteInspire(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response>

        /// Handle the "GenerateInspireAfterCreatedLast" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Response` messages.
        func generateInspireAfterCreatedLast(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response>

        /// Handle the "SendNotification" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Inspire_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Inspire_Response` messages.
        func sendNotification(
            request: GRPCCore.StreamingServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response>
    }

    /// Service protocol for the "inspire.AddService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Inspire_AddService.StreamingServiceProtocol {
        /// Handle the "Inspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Response` message.
        func inspire(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Response>

        /// Handle the "SendNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Response` message.
        func sendNotifications(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Response>

        /// Handle the "GetInspires" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Responses` message.
        func getInspires(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Responses>

        /// Handle the "UpdateInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Response` message.
        func updateInspire(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Response>

        /// Handle the "GetLastInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Response` message.
        func getLastInspire(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Response>

        /// Handle the "DeleteInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Response` message.
        func deleteInspire(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Response>

        /// Handle the "GenerateInspireAfterCreatedLast" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Response` message.
        func generateInspireAfterCreatedLast(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Response>

        /// Handle the "SendNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Inspire_Response` message.
        func sendNotification(
            request: GRPCCore.ServerRequest<Inspire_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Inspire_Response>
    }

    /// Simple service protocol for the "inspire.AddService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Inspire_AddService.ServiceProtocol {
        /// Handle the "Inspire" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Response` to respond with.
        func inspire(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Response

        /// Handle the "SendNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Response` to respond with.
        func sendNotifications(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Response

        /// Handle the "GetInspires" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Responses` to respond with.
        func getInspires(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Responses

        /// Handle the "UpdateInspire" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Response` to respond with.
        func updateInspire(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Response

        /// Handle the "GetLastInspire" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Response` to respond with.
        func getLastInspire(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Response

        /// Handle the "DeleteInspire" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Response` to respond with.
        func deleteInspire(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Response

        /// Handle the "GenerateInspireAfterCreatedLast" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Response` to respond with.
        func generateInspireAfterCreatedLast(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Response

        /// Handle the "SendNotification" method.
        ///
        /// - Parameters:
        ///   - request: A `Inspire_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Inspire_Response` to respond with.
        func sendNotification(
            request: Inspire_Request,
            context: GRPCCore.ServerContext
        ) async throws -> Inspire_Response
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Inspire_AddService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Inspire_AddService.Method.Inspire.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Response>(),
            handler: { request, context in
                try await self.inspire(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Inspire_AddService.Method.SendNotifications.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Response>(),
            handler: { request, context in
                try await self.sendNotifications(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Inspire_AddService.Method.GetInspires.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Responses>(),
            handler: { request, context in
                try await self.getInspires(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Inspire_AddService.Method.UpdateInspire.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Response>(),
            handler: { request, context in
                try await self.updateInspire(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Inspire_AddService.Method.GetLastInspire.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Response>(),
            handler: { request, context in
                try await self.getLastInspire(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Inspire_AddService.Method.DeleteInspire.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Response>(),
            handler: { request, context in
                try await self.deleteInspire(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Inspire_AddService.Method.GenerateInspireAfterCreatedLast.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Response>(),
            handler: { request, context in
                try await self.generateInspireAfterCreatedLast(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Inspire_AddService.Method.SendNotification.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Response>(),
            handler: { request, context in
                try await self.sendNotification(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Inspire_AddService.ServiceProtocol {
    internal func inspire(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response> {
        let response = try await self.inspire(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func sendNotifications(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response> {
        let response = try await self.sendNotifications(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getInspires(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Responses> {
        let response = try await self.getInspires(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func updateInspire(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response> {
        let response = try await self.updateInspire(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getLastInspire(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response> {
        let response = try await self.getLastInspire(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func deleteInspire(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response> {
        let response = try await self.deleteInspire(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func generateInspireAfterCreatedLast(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response> {
        let response = try await self.generateInspireAfterCreatedLast(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func sendNotification(
        request: GRPCCore.StreamingServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Inspire_Response> {
        let response = try await self.sendNotification(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Inspire_AddService.SimpleServiceProtocol {
    internal func inspire(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Response> {
        return GRPCCore.ServerResponse<Inspire_Response>(
            message: try await self.inspire(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func sendNotifications(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Response> {
        return GRPCCore.ServerResponse<Inspire_Response>(
            message: try await self.sendNotifications(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getInspires(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Responses> {
        return GRPCCore.ServerResponse<Inspire_Responses>(
            message: try await self.getInspires(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func updateInspire(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Response> {
        return GRPCCore.ServerResponse<Inspire_Response>(
            message: try await self.updateInspire(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getLastInspire(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Response> {
        return GRPCCore.ServerResponse<Inspire_Response>(
            message: try await self.getLastInspire(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func deleteInspire(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Response> {
        return GRPCCore.ServerResponse<Inspire_Response>(
            message: try await self.deleteInspire(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func generateInspireAfterCreatedLast(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Response> {
        return GRPCCore.ServerResponse<Inspire_Response>(
            message: try await self.generateInspireAfterCreatedLast(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func sendNotification(
        request: GRPCCore.ServerRequest<Inspire_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Inspire_Response> {
        return GRPCCore.ServerResponse<Inspire_Response>(
            message: try await self.sendNotification(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: inspire.AddService (client)

extension Inspire_AddService {
    /// Generated client protocol for the "inspire.AddService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "Inspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func inspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SendNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendNotifications<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetInspires" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Responses` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getInspires<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Responses>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Responses>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateInspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetLastInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getLastInspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteInspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GenerateInspireAfterCreatedLast" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func generateInspireAfterCreatedLast<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SendNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendNotification<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "inspire.AddService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Inspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func inspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.Inspire.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SendNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendNotifications<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.SendNotifications.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetInspires" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Responses` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getInspires<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Responses>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Responses>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.GetInspires.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateInspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.UpdateInspire.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetLastInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getLastInspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.GetLastInspire.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteInspire" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteInspire<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.DeleteInspire.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GenerateInspireAfterCreatedLast" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func generateInspireAfterCreatedLast<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.GenerateInspireAfterCreatedLast.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SendNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Inspire_Request` message.
        ///   - serializer: A serializer for `Inspire_Request` messages.
        ///   - deserializer: A deserializer for `Inspire_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendNotification<Result>(
            request: GRPCCore.ClientRequest<Inspire_Request>,
            serializer: some GRPCCore.MessageSerializer<Inspire_Request>,
            deserializer: some GRPCCore.MessageDeserializer<Inspire_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Inspire_AddService.Method.SendNotification.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Inspire_AddService.ClientProtocol {
    /// Call the "Inspire" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func inspire<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.inspire(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendNotifications" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendNotifications<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendNotifications(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetInspires" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getInspires<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Responses>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getInspires(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Responses>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateInspire" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateInspire<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateInspire(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetLastInspire" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getLastInspire<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getLastInspire(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteInspire" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteInspire<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteInspire(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GenerateInspireAfterCreatedLast" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func generateInspireAfterCreatedLast<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.generateInspireAfterCreatedLast(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendNotification" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Inspire_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendNotification<Result>(
        request: GRPCCore.ClientRequest<Inspire_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendNotification(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Inspire_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Inspire_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Inspire_AddService.ClientProtocol {
    /// Call the "Inspire" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func inspire<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.inspire(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendNotifications" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendNotifications<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.sendNotifications(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetInspires" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getInspires<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Responses>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.getInspires(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateInspire" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateInspire<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.updateInspire(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetLastInspire" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getLastInspire<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.getLastInspire(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteInspire" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteInspire<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteInspire(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GenerateInspireAfterCreatedLast" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func generateInspireAfterCreatedLast<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.generateInspireAfterCreatedLast(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendNotification" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendNotification<Result>(
        _ message: Inspire_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Inspire_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Inspire_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.sendNotification(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}